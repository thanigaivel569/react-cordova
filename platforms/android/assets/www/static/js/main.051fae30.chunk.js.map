{"version":3,"sources":["Component/Hello.js","ActionTypes/ProductActionTypes.js","Action/ProductAction.js","App.js","registerServiceWorker.js","Reducer/index.js","Reducer/ProductReducer.js","Sagas/ProductSaga.js","Sagas/index.js","index.js"],"names":["Hello","react_default","a","createElement","className","this","props","name","Component","GET_PRODUCT","GET_PRODUCT_SUCCESS","GET_PRODUCT_FAILURE","getProduct","type","ProductActionTypes","getProductSuccess","data","payload","getProductFailure","error","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeState","BarcodeScanner","scan","console","log","concat","setState","dataDisplay","state","value","Component_Hello","onClick","withRouter","connect","products","productsInfo","Products","isLoading","dispatch","actions","bindActionCreators","productActions","isLocalhost","Boolean","window","location","hostname","match","register","navigator","URL","process","origin","addEventListener","swUrl","fetch","then","response","status","headers","get","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","rootReducer","combineReducers","arguments","length","undefined","ProductsError","action","ProductActionType","objectSpread","getProductSaga","getProductWatcher","url","result","regenerator_default","wrap","_context","prev","next","json","sent","put","ProductAction","t0","stop","_marked","_context2","takeLatest","_marked2","rootSaga","Sagas_marked","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","createLogger","run","startApp","ReactDOM","render","es","BrowserRouter","src_App_0","document","getElementById","registerServiceWorker","cordova"],"mappings":"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","file":"static/js/main.051fae30.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Hello extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>{this.props.name}</h2>\n      </div>\n    );\n  }\n}\n\nexport default Hello;","export const GET_PRODUCT = \"GET_PRODUCT\";\nexport const GET_PRODUCT_SUCCESS = \"GET_PRODUCT_SUCCESS\";\nexport const GET_PRODUCT_FAILURE = \"GET_PRODUCT_FAILURE\";\n\n","import * as ProductActionTypes from '../ActionTypes/ProductActionTypes';\n\n \nexport function getProduct(){\n    return{\n    type:ProductActionTypes.GET_PRODUCT\n    }\n}\n\nexport function getProductSuccess(data){\n    return{\n        type:ProductActionTypes.GET_PRODUCT_SUCCESS,\n        payload:data\n    }\n}\n\nexport function getProductFailure(error){\n    return{\n        type:ProductActionTypes.GET_PRODUCT_FAILURE,\n        payload:error\n    }\n}","import React, { Component } from 'react';\r\n//import logo from './logo.svg';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport './App.css';\r\nimport Hello from './Component/Hello'\r\nimport * as productActions from './Action/ProductAction';\r\n//import { withRouter,Route, Switch, Link} from \"react-router-dom\";\r\nimport { withRouter } from \"react-router-dom\";\r\n//import ProductList from './Component/ProductList';\r\n// import QrReader from 'react-qr-reader'\r\nimport { BarcodeScanner } from '@ionic-native/barcode-scanner';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      value : \"Scan QRcode - Give camera access to scan\",\r\n      dataDisplay:\"\",\r\n      // result: 'No result',\r\n      // scan: false\r\n\r\n    }\r\n  }\r\n//  componentWillMount(){\r\n//   this.props.actions.getProduct();\r\n//  }\r\n// handleScan = data => {\r\n//   if (data) {\r\n//     this.setState({\r\n//       result: data\r\n//     })\r\n//   }\r\n// }\r\n// handleError = err => {\r\n//   console.error(err)\r\n// }\r\n\r\n//  changeState = () => {\r\n//   this.setState({\r\n//     data:data\r\n//   });\r\n//  }\r\nchangeState = () => {\r\n  \r\n  var data =  BarcodeScanner.scan();\r\n  console.log(`Barcode data: ${data}`);\r\n  this.setState({\r\n        dataDisplay:data\r\n    });\r\n  \r\n }\r\n  render() {\r\n    //alert(this.state.result);\r\n    return (\r\n      <div className=\"App\">\r\n        <Hello name={this.state.value} />\r\n        <p>{this.state.dataDisplay}</p>\r\n        <button type=\"button\"onClick={this.changeState}>Scan</button>\r\n       {/* <button type=\"button\"onClick={this.changeState}>Scan</button> \r\n         {this.state.scan ?\r\n         <div className=\"size\">\r\n         <QrReader\r\n          delay={false}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan} \r\n        />\r\n        </div> : \"\" }\r\n        <p>{this.state.result}</p> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    products:state.productsInfo.Products,\r\n    isLoading: state.productsInfo.isLoading\r\n\r\n  }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: bindActionCreators(productActions, dispatch)\r\n\r\n  }\r\n\r\n}\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ProductReducer from './ProductReducer';\nimport {combineReducers} from 'redux';\n\nconst rootReducer = combineReducers({\n    productsInfo :ProductReducer\n})\n\nexport default rootReducer;\n","import * as ProductActionType from '../ActionTypes/ProductActionTypes';\n\nexport default function productReducer(state= {Products:[] ,ProductsError:{}, isLoading:false},action){\n    switch(action.type){\n        case ProductActionType.GET_PRODUCT:\n      return {\n        ...state,\n        isLoading: true\n      };\n        case  ProductActionType.GET_PRODUCT_SUCCESS:\n        return { Products:action.payload ,isLoading: false }\n\n        case ProductActionType.GET_PRODUCT_FAILURE:\n        return {ProductsError:action.payload,isLoading: false}\n\n        default:\n        return state;\n    }\n}\n","import * as ProductAction from '../Action/ProductAction';\nimport * as ProductActionTypes from '../ActionTypes/ProductActionTypes';\nimport { put, takeLatest } from \"redux-saga/effects\";\n\nlet url = \"http://localhost:4000/products\"\n\nexport function* getProductSaga(){\n    try {\n        let result = yield fetch(url).then(result => result.json());\n        yield put (ProductAction.getProductSuccess(result)); \n\n    } catch(error){\n\n        yield put (ProductAction.getProductFailure(error));\n\n    }\n\n}\n\nexport function*  getProductWatcher(){\n    yield takeLatest(ProductActionTypes.GET_PRODUCT,getProductSaga)\n}","import {getProductWatcher} from './ProductSaga';\n\n\nexport default function* rootSaga() {\n  yield getProductWatcher()\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createLogger } from \"redux-logger\";\nimport rootReducer from \"./Reducer\";\nimport rootSaga from \"./Sagas\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nlet sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware, createLogger()));\nsagaMiddleware.run(rootSaga);\n\nconst startApp = () => {\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>, document.getElementById('root'));\n    registerServiceWorker();\n}\n\nif(window.cordova){\n    document.addEventListener('deviceready', startApp, false);\n} else{\n    startApp()\n}\n\n"],"sourceRoot":""}